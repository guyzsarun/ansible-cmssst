---
- hosts: local
  gather_facts: true
  ignore_errors: true
  vars_files: ../site.yml

  tasks:
    - name: "Parse vofeed"
      tags:
        - always
      block:
        - name: "Get vofeed"
          get_url:
            url: https://cmssst.web.cern.ch/cmssst/vofeed/vofeed.xml
            dest: ../tmp/vofeed.xml

        - set_fact:
            rse_query: "{% for item in site %}
                            @rse='{{ item }}' or
                        {% endfor %}"
        - xml:
            path: "../tmp/vofeed.xml"
            xpath: /root/atp_site/service[{{ rse_query | regex_replace('or $','')}}]
            content: attribute
          register: test

        - set_fact:
            temp: "{{ temp | default ([]) + [
                { 'rse' : item.service.rse + '_' + item.service.flavour,
                  'endpoint': item.service.endpoint
                }
              ]}} "
          with_items: "{{ test.matches }}"

    - name: 'Check port accessible'
      tags: ping
      wait_for:
        host: "{{ item.endpoint.split(':')[0] }}"
        port: "{{ item.endpoint.split(':')[1] }}"
        state: started
        timeout: 15
      with_items: "{{ temp }}"

    - name: 'Check storage certificate'
      tags: certs
      block:
        - get_certificate:
            host: "{{ item.endpoint.split(':')[0] }}"
            port: "{{ item.endpoint.split(':')[1] }}"
          run_once: true
          register: cert
          with_items: "{{ temp }}"

        - debug:
            msg: "Certificate expires in: {{ expire_days }} days."
          vars:
            expire_days: "{{ (( item.not_after | to_datetime('%Y%m%d%H%M%SZ')) - (ansible_date_time.iso8601 | to_datetime('%Y-%m-%dT%H:%M:%SZ')) ).days }}"
          changed_when: 'expire_days | int < 30'
          when:  item.not_after is defined
          with_items: "{{ cert.results }}"
          loop_control:
            label: "{{ item.item.rse }}"

- hosts: lxplus8
  gather_facts: true
  ignore_errors: true
  vars_files: ../site.yml
  tasks:
    - name: 'Check XRootD version'
      tags: version
      block:
        - import_tasks: init-voms.yml

        - script: ../scripts/xrootd-version.sh "{{ item.endpoint }}"
          with_items: "{{  hostvars['localhost']['temp'] }}"
          register: version
          when: '"XROOTD" in item.rse'

        - debug:
            msg: "{{ item.stdout | regex_replace('[\\r\\n\\t]+','\n') | split('\n') }}"
          with_items: "{{ version.results }}"
          loop_control:
            label: "{{ item.item.rse }}"
          when: item.changed
